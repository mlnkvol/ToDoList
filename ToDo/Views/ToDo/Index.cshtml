@model IEnumerable<ToDo.Models.ToDoItem>

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ToDo List</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" type="text/css" href="~/css/site.css"> 
</head>
<body>
    <div>
        <h1>Список завдань</h1>

        <form id="addForm" method="post" action="/todo/add">
            <input type="text" name="task" placeholder="Додати нове завдання" required>
            <button type="submit">Додати</button>
        </form>

        <ul id="todoList">
            @foreach (var todo in Model)
            {
                <li class="todo-item" data-id="@todo.Id" draggable="true">
                    <input type="checkbox" class="complete-checkbox" @(todo.IsCompleted ? "checked" : "")>
                    <span style="text-decoration: @(todo.IsCompleted ? "line-through" : "none")">@todo.Task</span>
                    <button class="delete-button">Видалити</button>
                </li>
            }
        </ul>
    </div>

    <script>
        // Функція для зберігання завдань у localStorage
        function saveToLocalStorage() {
            const todos = [];
            $('#todoList .todo-item').each(function () {
                const id = $(this).data('id');
                const task = $(this).find('span').text();
                const isCompleted = $(this).find('.complete-checkbox').is(':checked');
                todos.push({ id: id, task: task, isCompleted: isCompleted });
            });
            localStorage.setItem('todoItems', JSON.stringify(todos));
        }

        // Функція для відновлення завдань з localStorage
        function loadFromLocalStorage() {
            const todos = JSON.parse(localStorage.getItem('todoItems')) || [];
            $('#todoList').empty();
            todos.forEach(todo => {
                const listItem = $(`
                                    <li class="todo-item updated" data-id="${todo.id}" draggable="true">
                                        <input type="checkbox" class="complete-checkbox" ${todo.isCompleted ? "checked" : ""}>
                                        <span style="text-decoration: ${todo.isCompleted ? 'line-through' : 'none'}">${todo.task}</span>
                                        <button class="delete-button">Видалити</button>
                                    </li>
                                `);
                $('#todoList').append(listItem);
                setTimeout(() => listItem.removeClass('updated'), 1000);
            });
        }

        $(document).ready(function () {
            loadFromLocalStorage();

            $('#todoList').on('click', '.delete-button', function () {
                var todoItem = $(this).closest('.todo-item');
                todoItem.remove();
                saveToLocalStorage();
            });

            $('#todoList').on('change', '.complete-checkbox', function () {
                var todoItem = $(this).closest('.todo-item');
                if ($(this).is(':checked')) {
                    todoItem.find('span').css('text-decoration', 'line-through');
                } else {
                    todoItem.find('span').css('text-decoration', 'none');
                }
                saveToLocalStorage();
            });

            $('#addForm').on('submit', function (e) {
                e.preventDefault();
                const taskInput = $(this).find('input[name="task"]');
                const task = taskInput.val();

                const newId = $('#todoList .todo-item').length + 1;
                const listItem = $(`
                                    <li class="todo-item" data-id="${newId}" draggable="true">
                                        <input type="checkbox" class="complete-checkbox">
                                        <span>${task}</span>
                                        <button class="delete-button">Видалити</button>
                                    </li>
                                `);
                $('#todoList').append(listItem);
                taskInput.val('');
                saveToLocalStorage();
            });

            // Drag-and-drop функціонал
            let draggedItem = null;

            $('#todoList').on('dragstart', '.todo-item', function () {
                draggedItem = $(this);
                $(this).css('opacity', '0.7');
            });

            $('#todoList').on('dragend', '.todo-item', function () {
                $(this).css('opacity', '1');
                draggedItem = null;
            });

            $('#todoList').on('dragover', function (e) {
                e.preventDefault();
            });

            $('#todoList').on('drop', function (e) {
                e.preventDefault();
                if (draggedItem) {
                    const target = $(e.target).closest('.todo-item');
                    if (target.length && target[0] !== draggedItem[0]) {
                        draggedItem.insertBefore(target);
                    } else {
                        $(this).append(draggedItem);
                    }
                    saveToLocalStorage();
                }
            });

            // SSE підключення для синхронізації
            const eventSource = new EventSource("/sse");
            eventSource.onmessage = function (event) {
                const data = event.data;
                if (data === 'Task list updated') {
                    loadFromLocalStorage();
                }
            };

            eventSource.onerror = function (event) {
                console.error("SSE connection error", event);
            };
        });
    </script>
</body>
</html>
