@model IEnumerable<ToDo.Models.ToDoItem>

<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ToDo List</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Список завдань</h1>

    <form id="addForm" method="post" action="/todo/add">
        <input type="text" name="task" placeholder="Додати нове завдання" required>
        <button type="submit">Додати</button>
    </form>

    <ul id="todoList">
        @foreach (var todo in Model)
        {
            <li class="todo-item" data-id="@todo.Id" draggable="true">
                <span style="text-decoration: @(todo.IsCompleted ? "line-through" : "none")">@todo.Task</span>
                @if (!todo.IsCompleted)
                {
                    <button class="complete-button">Завершити</button>
                }
                <button class="delete-button">Видалити</button>
            </li>
        }
    </ul>

    <script>
        // Функція для зберігання завдань у localStorage
        function saveToLocalStorage() {
            const todos = [];
            $('#todoList .todo-item').each(function () {
                const id = $(this).data('id');
                const task = $(this).find('span').text();
                const isCompleted = $(this).find('span').css('text-decoration') === 'line-through';
                todos.push({ id: id, task: task, isCompleted: isCompleted });
            });
            localStorage.setItem('todoItems', JSON.stringify(todos));
        }

        // Функція для відновлення завдань з localStorage
        function loadFromLocalStorage() {
            const todos = JSON.parse(localStorage.getItem('todoItems')) || [];
            $('#todoList').empty(); // Очищаємо список перед завантаженням
            todos.forEach(todo => {
                const listItem = $(`
                            <li class="todo-item" data-id="${todo.id}" draggable="true">
                                <span style="text-decoration: ${todo.isCompleted ? 'line-through' : 'none'}">${todo.task}</span>
                                ${!todo.isCompleted ? '<button class="complete-button">Завершити</button>' : ''}
                                <button class="delete-button">Видалити</button>
                            </li>
                        `);
                $('#todoList').append(listItem);
            });
        }

        $(document).ready(function () {
            loadFromLocalStorage(); // Завантажуємо завдання з localStorage при відкритті сторінки

            // Делегування подій для кнопок "Видалити" і "Завершити"
            $('#todoList').on('click', '.delete-button', function () {
                var todoItem = $(this).closest('.todo-item');
                todoItem.remove(); // видаляємо елемент зі списку
                saveToLocalStorage(); // зберігаємо зміни
            });

            $('#todoList').on('click', '.complete-button', function () {
                var todoItem = $(this).closest('.todo-item');
                todoItem.find('span').css('text-decoration', 'line-through'); // відмічаємо задачу як завершену
                $(this).remove(); // видаляємо кнопку "Завершити"
                saveToLocalStorage(); // зберігаємо зміни
            });

            $('#addForm').on('submit', function (e) {
                e.preventDefault(); // запобігаємо стандартній поведінці форми
                const taskInput = $(this).find('input[name="task"]');
                const task = taskInput.val();

                const newId = $('#todoList .todo-item').length + 1; // Генеруємо новий ID
                const listItem = $(`
                            <li class="todo-item" data-id="${newId}" draggable="true">
                                <span>${task}</span>
                                <button class="complete-button">Завершити</button>
                                <button class="delete-button">Видалити</button>
                            </li>
                        `);
                $('#todoList').append(listItem);
                taskInput.val(''); // Очищаємо поле вводу
                saveToLocalStorage(); // Зберігаємо зміни
            });

            // Drag-and-Drop функціональність
            let draggedItem = null;

            $('#todoList').on('dragstart', '.todo-item', function (e) {
                draggedItem = this;
                $(this).css('opacity', '0.5');
            });

            $('#todoList').on('dragend', function () {
                $(draggedItem).css('opacity', '1');
                draggedItem = null;
            });

            $('#todoList').on('dragover', function (e) {
                e.preventDefault(); // Дозволяємо перетягування
            });

            $('#todoList').on('drop', function (e) {
                e.preventDefault();
                if (draggedItem) {
                    const afterElement = getDragAfterElement($(this), e.clientY);
                    if (afterElement == null) {
                        $(this).append(draggedItem);
                    } else {
                        $(this).insertBefore(draggedItem, afterElement);
                    }
                    saveToLocalStorage(); // Зберігаємо новий порядок
                }
            });

            function getDragAfterElement(container, y) {
                const draggableElements = [...container.children('.todo-item:not(.dragging)')];

                return draggableElements.reduce((closest, child) => {
                    const box = child.getBoundingClientRect();
                    const offset = y - box.top - box.height / 2;

                    if (offset < 0 && offset > closest.offset) {
                        return { offset: offset, element: child };
                    } else {
                        return closest;
                    }
                }, { offset: Number.NEGATIVE_INFINITY }).element;
            }
        });
    </script>
</body>
</html>
